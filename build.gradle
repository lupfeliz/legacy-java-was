/**
 * @File        : build.gradle
 * @Author      : 정재백
 * @Since       : 2024-10-28
 * @Description : gradle 빌드파일
 * @Site        : https://devlog.ntiple.com
 *
 * 다음과 같이 실행 및 빌드를 수행한다.
 *
 * 실행 (local)
 * > gradlew bootRun -Dspring.profiles.active=local
 *
 * 빌드 (빌드시에는 프로파일 지정이 무의미하다.)
 * > gradlew build
 * 
 * 테스트
 * > gradlew cleanTest test -Dproject.build.test=MANUAL -i --no-watch-fs --tests "{패키지}.{클래스}.{메소드 또는 *}"
 **/

plugins {
  id 'org.springframework.boot' version '2.7.18'
  id 'io.spring.dependency-management' version '1.1.5'
  id 'java'
  id 'maven-publish'
  id 'war'
}

group = 'com.ntiple'
version = '0.0.1-SNAPSHOT'
java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
  compileJava.options.encoding = 'UTF-8'
  compileTestJava.options.encoding = 'UTF-8'
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}
System.setProperty('file.encoding', 'UTF-8')
String PROFILE = System.env['PROFILE']
String NEXUS_MAVEN_REPO = System.env['NEXUS_MAVEN_REPO']
String CURRENT_DIR = System.properties['user.dir']
Object DOTENV = new Properties()

/**
 * 아래와 같이 넥서스 저장소 주소를 환경변수에 저장할 수 있다.
 * windows
 * set NEXUS_MAVEN_REPO=http://192.168.0.2:8081/repository/maven-public/
 * *nix 
 * export NEXUS_MAVEN_REPO=http://192.168.0.2:8081/repository/maven-public/
 * 또는 .env 파일에 쓸 수 있다.
 * Eclipse(또는 STS) 에서 실행할 경우에는 Eclipse 실행경로에 .env 파일을 두어야 한다 
 **/
File ENVFILE = new File(CURRENT_DIR + '/.env')
if (ENVFILE.exists()) {
  InputStream is = new ByteArrayInputStream(ENVFILE.getText('UTF-8').getBytes())
  DOTENV.load(is)
  String profile = DOTENV.'PROFILE'
  String nexusRepo = DOTENV.'NEXUS_MAVEN_REPO'
  if (profile != null && !''.equals(profile)) { PROFILE = profile }
  if (nexusRepo != null && !''.equals(nexusRepo)) { NEXUS_MAVEN_REPO = nexusRepo }
}

if (System.properties['spring.profiles.active'] != null) {
  String profile = System.properties['spring.profiles.active']
  if (profile != null && !''.equals(profile)) { PROFILE = profile }
}
if (PROFILE == null || ''.equals(PROFILE)) { PROFILE = 'local' }

publishing {
  publications {
    maven(MavenPublication) {
      group = 'com.ntiple'
      version = version
      artifactId = rootProject.name
      from components.java
    }
  }
}

repositories {
  if (NEXUS_MAVEN_REPO == null || ''.equals(NEXUS_MAVEN_REPO)) {
    println('USE MAVEN CENTRAL REPOSITORY')
    mavenCentral()
    mavenLocal()
    maven { url 'https://repo.spring.io/milestone' }
  } else {
    println('USE NEXUS REPOSITORY : ' + NEXUS_MAVEN_REPO)
    mavenLocal()
    maven {
      url NEXUS_MAVEN_REPO
      allowInsecureProtocol = true
    }
  }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  // implementation 'org.springframework.boot:spring-boot-starter-websocket'
  implementation 'org.springframework.boot:spring-boot-starter-aop'
  // implementation 'org.springframework.boot:spring-boot-starter-quartz'
  // implementation 'org.springframework.boot:spring-boot-starter-batch'
  implementation 'org.springframework.boot:spring-boot-starter-mail'
  // implementation 'org.springframework.boot:spring-boot-starter-data-redis'
  // implementation 'org.springframework.boot:spring-boot-starter-data-rest'
  implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
  implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

  /** JSP, JSTL */
  implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
  implementation 'javax.servlet:javax.servlet-api:4.0.1'
  implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'
  
  /** OpenAPI (swagger) */
  implementation 'org.springdoc:springdoc-openapi-ui:1.8.0'

  /** Tiles */
  implementation 'org.apache.tiles:tiles-jsp:3.0.1'
  implementation 'org.apache.tiles:tiles-servlet:3.0.1'
  implementation 'org.apache.tiles:tiles-core:3.0.1'
  
  /** log4jdbc */
  implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16' 

  /** http client */
  implementation 'org.apache.httpcomponents:httpclient:4.5.14'
  implementation 'org.apache.httpcomponents:httpmime:4.5.14'

  /** apache commons */
  implementation 'commons-fileupload:commons-fileupload:1.5'
  implementation 'commons-codec:commons-codec:1.17.1'
  implementation 'commons-io:commons-io:2.17.0'
  implementation 'org.apache.commons:commons-dbcp2:2.12.0'
  implementation 'org.apache.commons:commons-text:1.12.0'
  implementation 'org.apache.commons:commons-compress:1.27.1'
  implementation 'org.apache.commons:commons-collections4:4.4'
  implementation 'org.apache.commons:commons-lang3:3.17.0'

  /** 웹소켓 */
  implementation 'org.webjars:webjars-locator-core'
  implementation 'org.webjars:sockjs-client:1.5.1'
  implementation 'org.webjars:stomp-websocket:2.3.4'

  /** ssh / zip */
  implementation 'com.jcraft:jsch:0.1.55'
  implementation 'com.jcraft:jzlib:1.1.3'

  /** git / svn */
  implementation 'org.eclipse.jgit:org.eclipse.jgit:7.0.0.202409031743-r'
  implementation 'org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:7.0.0.202409031743-r'
  implementation 'org.tmatesoft.svnkit:svnkit:1.10.11'

  /** 웹토큰 */
  implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

  /** json / yaml */
  implementation 'org.json:json:20230618'
  implementation 'org.yaml:snakeyaml:2.2'

  /** 기타 */
  runtimeOnly 'org.postgresql:postgresql'
  runtimeOnly 'com.h2database:h2'
  implementation 'org.apache.poi:poi:5.3.0'
  implementation 'org.apache.poi:poi-ooxml:5.3.0'
  implementation 'org.ehcache:ehcache:3.10.8'
  implementation 'net.logicsquad:minifier:1.3'
  implementation 'javax.validation:validation-api:2.0.1.Final'
  implementation 'de.larsgrefer.sass:sass-embedded-host:4.0.0-m1'
  implementation 'com.ntiple:ntiple-utils:0.0.3-8'

  /** file-based library */
  implementation fileTree(dir: 'libs', include: ['*.jar'])

  /** 빌드, 개발 및 테스트 관련 */
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  developmentOnly 'org.springframework.boot:spring-boot-starter-tomcat'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor 'org.projectlombok:lombok'

  testImplementation 'org.projectlombok:lombok'
  testAnnotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.mockito:mockito-core:5.5.0'
  testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

tasks.named('test') { useJUnitPlatform() }
tasks.test { useJUnitPlatform() }
test { useJUnitPlatform() }

task prebuildHook() {
  dependsOn(build)
  dependsOn(bootRun)
}

build {
}

/** sass 컴파일러 warning 제거 */
tasks.withType(JavaCompile) { options.warnings = false }

test {
  String tstlvl = System.properties['project.build.test']
  if (tstlvl == null || ''.equals(tstlvl)) { tstlvl = 'SIMPLE' }
  systemProperty('project.build.test', tstlvl)
  reports.html.required = false
}

bootRun {
  systemProperty('spring.profiles.active', PROFILE)
  systemProperty('java.file.encoding', 'UTF-8')
  println('================================================================================')
  println('LEGACY-JAVA-WEB APPLICATION SYSTEM')
  println('PROFILE:' + PROFILE + ' / ' + group + ' ' + rootProject.name + ' ' + version)
  println('================================================================================')
}
